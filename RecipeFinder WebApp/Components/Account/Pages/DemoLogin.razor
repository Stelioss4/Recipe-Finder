@page "/Account/DemoLogin"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using RecipeFinder_WebApp.Data
@using Recipe_Finder

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext context




<PageTitle>Log in</PageTitle>

<h1>Logging in...</h1>

@code {
    private string errorMessage;
    private readonly string DemoEmail = "demo@recipefinder.com";
    private readonly string DemoPassword = "DemoPass123!";
    private User myUser { get; set; } = new();



    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear any external login cookies
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        await RegisterDemoUser();
    }

    private async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(DemoEmail, DemoPassword, false, false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/profile");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
    private async Task RegisterDemoUser()
    {
        var existingUser = await UserManager.FindByEmailAsync(DemoEmail);
        if (existingUser != null)
        {
            errorMessage = "Demo user already exists. Please log in.";
            await LoginUser();
            return;
        }

        var user = new ApplicationUser { UserName = DemoEmail, Email = DemoEmail };
        var result = await UserManager.CreateAsync(user, DemoPassword);

        if (result.Succeeded)
        {
            myUser = user.User;

            myUser.Name = user.UserName;

            context.Update(user);
            await context.SaveChangesAsync();
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = string.Join("<br>", result.Errors.Select(e => e.Description));
        }
    }
}
