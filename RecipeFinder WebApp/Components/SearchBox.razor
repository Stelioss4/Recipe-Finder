@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using RecipeFinder_WebApp.Components.Account.Pages
@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication

@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject DataService DataService
@inject ILogger<Login> Logger

<h3>SearchBox</h3>


<EditForm Model="@searchQuery" FormName="RecipeForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe..." /><br />
    <div class="text-center">
        <button class="btn btn-primary" @onclick="SearchForRecipeFromCK" disabled="@isSearching">
            @if (isSearching)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Searching...</span>
            }
            else
            {
                <span>Search</span>
            }
        </button>
    </div>
</EditForm>
@code {
    [Parameter] public string searchQuery { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }

    private bool isSearching = false;

    private async Task SearchForRecipeFromCK()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isSearching = true;

        var recipes = await Scrap.ScrapeCKRecipes(searchQuery);

        isSearching = false;

        if (OnSearch.HasDelegate)
            await OnSearch.InvokeAsync(searchQuery);
    }
}