@using Recipe_Finder
@using HtmlAgilityPack
@inject ScrapperService Scrap
@inject NavigationManager Navigation

<PageTitle>Recipe Details</PageTitle>

<div class="container mt-4">
    <h3 class="text-primary text-center">Recipe Details</h3>

    @if (recipe != null)
    {
        <div class="card shadow-sm mb-4 mx-auto" style="max-width: 800px;">
            <div class="card-body text-center">
                <h2 class="card-title">@recipe.RecipeName</h2>

                @if (!string.IsNullOrEmpty(recipe.Image))
                {
                    <img src="@recipe.Image" class="img-fluid rounded mb-3" alt="Recipe Image" style="width: 100%; max-width: 400px; height: auto;" />
                }

                @if (!string.IsNullOrEmpty(recipe.VideoUrl))
                {
                    <div class="mt-3">
                        <h4 class="text-secondary">Recipe Video</h4>
                        <video width="320" height="240" controls class="w-100">
                            <source src="@recipe.VideoUrl" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                }

                <div class="card shadow-sm mb-4 mt-3 mx-auto" style="max-width: 500px;">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 text-center">
                                <h4 class="text-secondary">Difficulty Level</h4>
                                <p class="card-text">@recipe.DifficultyLevel</p>
                            </div>
                            <div class="col-md-6 text-center">
                                <h4 class="text-secondary">Cooking Time</h4>
                                <p class="card-text">@recipe.Time</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-3 text-center">
                    <p class="font-italic">Quick tip: "Check the box for any ingredient you already have."</p>
                    <h3 class="text-secondary">Ingredients</h3><br />
                    <ul class="list-group list-group-flush mx-auto" style="max-width: 400px;">
                        @foreach (var ingredient in recipe.ListofIngredients)
                        {
                            <li class="list-group-item">
                                <input type="checkbox" id="@ingredient.IngredientsName" class="mr-2">
                                <label for="@ingredient.IngredientsName">@ingredient.IngredientsName</label>
                            </li>
                        }
                    </ul>
                </div>

                <div class="mt-3 text-left">
                    <h4 class="text-secondary text-center">Cooking Instructions</h4>
                    <p class="card-text text-justify">@((MarkupString)recipe.CookingInstructions)</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-muted text-center">Loading...</p>
    }
    <br/>
    <br/>
    <button class="btn btn-primary" @onclick="() => AddRecipeToFavorite(recipe)">Add to Fav!</button>
</div>

@code {
    [Parameter]
    public string Url { get; set; }

    private Recipe recipe { get; set; }

    private Ingredient ingredient { get; set; }

    private User user { get; set; } = new User();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync called");
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("url", out var urlValue))
        {
            Console.WriteLine($"Found url parameter: {urlValue}");
            var decodedUrl = Uri.UnescapeDataString(urlValue);

            try
            {
                if (decodedUrl.Contains("chefkoch.de"))
                {
                    recipe = await Scrap.ScrapeCKDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else if (decodedUrl.Contains("allrecipes.com"))
                {
                    recipe = await Scrap.ScrapeAllRecipesDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else if (decodedUrl.Contains(Constants.COOKPAD_URL))
                {
                    recipe = await Scrap.ScrapeCookPadDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else
                {
                    Console.WriteLine("Unknown source domain");
                }

                if (recipe == null)
                {
                    Console.WriteLine("Recipe object is null after scraping.");
                }
                else
                {
                    Console.WriteLine($"Scraped recipe: {recipe.RecipeName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during scraping: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("url parameter not found, navigating to home");
            Navigation.NavigateTo("/");
        }
    }

    private void AddRecipeToFavorite(Recipe recipe)
    {
        if (user.FavoriteRecipes == null)
        {
            user.FavoriteRecipes = new List<Recipe>();
        }

        user.FavoriteRecipes.Add(recipe);
        ScrapperService.SaveRecipesToXmlFile(user.FavoriteRecipes, Constants.XML_FAVORITE_REC_PATH);
    }
}