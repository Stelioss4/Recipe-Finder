@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims


@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject DataService _dataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject ApplicationDbContext _context
@inject SpoonacularService spoonacular
@inject FavoriteService _favorite




<PageTitle>Recipe Details</PageTitle>

<div class="container mt-4">
    <h3 class="text-center">Recipe Details</h3>

    @if (recipe != null)
    {
        <div class="card shadow-sm mb-4 mx-auto" style="max-width: 800px;">
            <div class="card-body text-center">
                <h2 class="card-title">@recipe.RecipeName</h2>

                @if (recipe.Image != null && recipe.Image.Length > 0)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(recipe.Image)" class="card-img-top" alt="Recipe Image" style="width: 100%; max-width: 400px; height: auto;" />
                }
                <p class="alert-primary text-center">difficulty level: @recipe.DifficultyLevel</p>
                <p class="alert-primary text-center">Total time needed: @recipe.Time</p>
                <p class="alert-primary text-center">Average Rating: @averageRating.ToString("F2") <button class="btn btn-secondary" @onclick="NavigateToReviews">See recipe's reviews</button></p>

                <!-- Popup button for user input -->
                <br /> <button class="btn btn-secondary mt-3" @onclick="() => showPopup = true">Cooking for @peopleCount People</button>

                <!-- Popup box -->
                @if (showPopup)
                {
                    <div class="popup">
                        <div class="popup-content">
                            <h4>Enter Number of People</h4>
                            <input type="number" @bind="peopleCount" min="1" />
                            <button class="btn btn-primary mt-2" @onclick="UpdateIngredients">Update</button>
                            <button class="btn btn-danger mt-2" @onclick="() => showPopup = false">Close</button>
                        </div>
                    </div>
                }

                <div class="mt-3 text-center">

                    <p class="font-italic">Quick tip: "Check the box for any ingredient you already have."</p>
                    <h3 class="text-secondary">Ingredients (For @peopleCount People)</h3><br />
                    <ul class="list-group list-group-flush mx-auto" style="max-width: 400px;">
                        @foreach (var ingredient in recipe.ListOfIngredients)
                        {
                            <li class="list-group-item">
                                <input type="checkbox" id="@ingredient.IngredientsName" class="mr-2" />
                                <label for="@ingredient.IngredientsName">
                                    (@GetAmountForPeople(ParseAmount(ingredient.Amount))@ParseUnit(ingredient.Amount)) @ingredient.IngredientsName
                                </label>
                                <br />
                                <a class="btn btn-danger btn-sm" target="_blank" href="https://www.rewe.de/suche/produkte?search=@Uri.EscapeDataString(ingredient.IngredientsName)">
                                    REWE
                                </a>
                                @*                                 <button class="btn btn-secondary" @onclick="AddIngredientToShoppingList">Add to shopping list</button>
                        *@
                            </li>

                        }
                    </ul>
                </div>

                <div class="mt-3 text-left">
                    <h4 class="text-secondary text-center">Cooking Instructions</h4>
                    <p class="card-text text-justify">@((MarkupString)recipe.CookingInstructions)</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-muted text-center">Loading...</p>
    }
    <br />
    <br />

    <button class="btn btn-primary" @onclick="RatingShowPopup">Tell us your opinion</button>

    @if (ReviewAndRatingShowPopup)
    {
        <div class="popup">
            <div class="popup-content">
                <div class="mt-3">
                    <h4 class="text-secondary">Leave a Review</h4>
                    <div class="form-group">
                        <label>Rating (1 to 5):</label>
                        <input type="number" @bind="newRating.Value" min="1" max="5" />
                    </div>
                    <div class="form-group">
                        <label>Review Text:</label>
                        <textarea class="form-control" @bind="newReview.ReviewText"></textarea>
                    </div>
                </div>
                <button class="btn btn-primary" @onclick="()=>SubmitRatingAndReview(recipe)">Confirm your review and/or rating</button>
            </div>
        </div>
    }

    <a class="btn btn-danger" target="_blank" href="https://www.rewe.de/suche/produkte?search">REWE</a>

</div>
<br />


@code {
    [Parameter]
    public string Url { get; set; }

    private Recipe recipe { get; set; } = new();

    private Review newReview { get; set; } = new Review();

    private Rating newRating { get; set; } = new Rating();

    private List<Recipe> recipes { get; set; }

    private Ingredient ingredient { get; set; } = new();

    private double averageRating { get; set; }

    private int peopleCount { get; set; } = 4;  // Default for 4 people

    private bool showPopup { get; set; } = false;

    private bool showIngredientStorePopup { get; set; } = false;

    private bool ReviewAndRatingShowPopup { get; set; } = false;



    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("url", out var urlValue))
        {
            Console.WriteLine($"Found url parameter: {urlValue}");
            var decodedUrl = Uri.UnescapeDataString(urlValue);

            // 1. Check if the recipe is already in the database
            recipe = await _context.Recipes.FirstOrDefaultAsync(r => r.Url == decodedUrl);

            if (recipe.CookingInstructions != null)
            {
                Console.WriteLine("Recipe found in the database.");
                // Fetch additional related data as needed, e.g., average rating
                var result = await _dataService.ShowRecipesReviewsAndRatings(recipe);
                averageRating = result.AverageRating;
            }
            else
            {
                // 2. If not in the database, proceed with scraping
                Console.WriteLine("Recipe not found in database; starting online scrape.");

                try
                {
                    if (decodedUrl.Contains(Constants.CHEFKOCH_URL) || decodedUrl.Contains(Constants.ALLRECIPE_URL))
                    {
                        if (decodedUrl.Contains(Constants.CHEFKOCH_URL))
                        {
                            recipe = await Scrap.ScrapeCKDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                        }
                        if (decodedUrl.Contains(Constants.ALLRECIPE_URL))
                        {
                            recipe = await Scrap.ScrapeAllRecipesDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                        }
                    }
                    else
                    {
                        Console.WriteLine("Unknown source domain");
                    }

                    // 3. Save the newly scraped recipe to the database
                    if (recipe != null)
                    {
                        _context.Recipes.Add(recipe);
                        await _context.SaveChangesAsync();
                        Console.WriteLine($"Scraped and saved recipe: {recipe.RecipeName}");
                    }
                    else
                    {
                        Console.WriteLine("Recipe object is null after scraping.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during scraping: {ex.Message}");
                }
            }
        }
        else
        {
            Console.WriteLine("URL parameter not found; navigating to home.");
            Navigation.NavigateTo("/");
        }
    }

    private double ParseAmount(string amount)
    {
        if (string.IsNullOrWhiteSpace(amount))
            return 0;

        // Clean amount: remove non-numeric characters except for dots and commas
        var cleanedAmount = new string(amount.Where(c => char.IsDigit(c) || c == '.' || c == ',').ToArray());

        // Replace comma with dot for decimal consistency
        cleanedAmount = cleanedAmount.Replace(",", ".");

        // Try to parse to double; if fails, return 0
        return double.TryParse(cleanedAmount, out var result) ? result : 0;
    }
    private string ParseUnit(string amount)
    {
        // Check if amount is null or empty
        if (string.IsNullOrEmpty(amount))
        {
            return string.Empty;
        }

        // Parse the numeric part of the amount
        var parsedAmount = ParseAmount(amount);

        // Extract the unit by removing the numeric part from the amount
        var amountUnit = amount.Replace(parsedAmount.ToString(), "").Trim();

        return amountUnit;
    }


    private double ConvertToDouble(object amount)
    {
        if (amount is double) return (double)amount;

        double.TryParse(amount?.ToString(), out var result);
        return result;
    }

    private async Task GetIngredientsForRecipePopUp()
    {
        if (recipe != null)
        {
            await GetIngredientsForRecipe();
        }
        showIngredientStorePopup = !showIngredientStorePopup;
    }
    private async Task GetIngredientsForRecipe()
    {
        recipe.ListOfIngredients = await spoonacular.GetIngredientsForRecipe(recipe);
    }

    // Method to update ingredient amounts based on peopleCount
    private void UpdateIngredients()
    {
        showPopup = false;
    }

    // Calculate ingredient amount based on the number of people
    private string GetAmountForPeople(double baseAmount)
    {
        double adjustedAmount = baseAmount * peopleCount / 4;
        return adjustedAmount.ToString("0.##"); // Format to two decimal places
    }

    private async Task AddIngredientToShoppingList()
    {
        await _favorite.AddIngredientsToShoppingList(ingredient);
    }
    private void NavigateToReviews()
    {
        if (!string.IsNullOrEmpty(recipe?.Url))
        {
            string encodedUrl = Uri.EscapeDataString(recipe.Url);
            Console.WriteLine($"Navigating to reviews with URL: {encodedUrl}"); // Log the URL
            Navigation.NavigateTo($"/watchUsersReview?Url={encodedUrl}");
        }
        else
        {
            Console.WriteLine("Recipe URL is null or empty."); // Log the issue
                                                               // Handle accordingly, e.g., show a message to the user or fallback navigation
        }
    }


    private void RatingShowPopup()
    {
        ReviewAndRatingShowPopup = !ReviewAndRatingShowPopup;
    }

    private async Task SubmitRatingAndReview(Recipe recipe)
    {
        if (recipe is null)
        {
            throw new ArgumentNullException(nameof(recipe));
        }

        try
        {
            if (_context == null)
            {
                throw new InvalidOperationException("DbContext is null");
            }

            var user = await _dataService.GetAuthenticatedUserAsync();
            if (user.User == null)
            {
                throw new InvalidOperationException("Authenticated user is null");
            }

            if (recipe != null)
            {
                var recipeExists = await _context.Recipes.AnyAsync(r => r.Id == recipe.Id);
                if (!recipeExists)
                {
                    throw new InvalidOperationException("The specified recipe does not exist in the database.");
                }

                // Create a new review
                var review = new Review
                    {
                        ReviewText = newReview.ReviewText,
                        TimeStam = DateTime.Now,
                        RecipeId = recipe.Id,
                        Profile = user.User
                    };

                // Create a new rating
                var rating = new Rating
                    {
                        Value = newRating.Value,
                        TimeStam = DateTime.Now,
                        RecipeId = recipe.Id,
                        Profile = user.User
                    };

                // Add the review and rating to the database
                _context.Reviews.Add(review);
                _context.Ratings.Add(rating);

                await _context.SaveChangesAsync();

                // Clear the form fields
                newReview.ReviewText = string.Empty;
                newRating.Value = 0;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error submitting review and rating: {ex.Message}");
        }
    }
}