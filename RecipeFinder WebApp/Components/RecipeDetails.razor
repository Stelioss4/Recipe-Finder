@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims


@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject DataService _dataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject ApplicationDbContext _context
@inject SpoonacularService spoonacular



<PageTitle>Recipe Details</PageTitle>

<div class="container mt-4">
    <h3 class="text-primary text-center">Recipe Details</h3>

    @if (recipe != null)
    {
        <div class="card shadow-sm mb-4 mx-auto" style="max-width: 800px;">
            <div class="card-body text-center">
                <h2 class="card-title">@recipe.RecipeName</h2>

                @if (recipe.Image != null && recipe.Image.Length > 0)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(recipe.Image)" class="card-img-top" alt="Recipe Image" style="width: 100%; max-width: 400px; height: auto;" />
                }
                <p class="alert-primary text-center">difficulty level: @recipe.DifficultyLevel</p>
                <p class="alert-primary text-center">Total time needed: @recipe.Time</p>

                <!-- Popup button for user input -->
                <br /> <button class="btn btn-secondary mt-3" @onclick="() => showPopup = true">Cooking for @peopleCount People</button>

                <!-- Popup box -->
                @if (showPopup)
                {
                    <div class="popup">
                        <div class="popup-content">
                            <h4>Enter Number of People</h4>
                            <input type="number" @bind="peopleCount" min="1" />
                            <button class="btn btn-primary mt-2" @onclick="UpdateIngredients">Update</button>
                            <button class="btn btn-danger mt-2" @onclick="() => showPopup = false">Close</button>
                        </div>
                    </div>
                }

                <div class="mt-3 text-center">

                    <p class="font-italic">Quick tip: "Check the box for any ingredient you already have."</p>
                    <h3 class="text-secondary">Ingredients (For @peopleCount People)</h3><br />
                    <ul class="list-group list-group-flush mx-auto" style="max-width: 400px;">
                        @foreach (var ingredient in recipe.ListOfIngredients)
                        {
                            <li class="list-group-item">
                                <input type="checkbox" id="@ingredient.IngredientsName" class="mr-2">
                                <label for="@ingredient.IngredientsName">(@GetAmountForPeople(ConvertToDouble(ingredient.Amount))) @ingredient.IngredientsName </label>
                            </li>
                        }
                    </ul>
                </div>

                <div class="mt-3 text-left">
                    <h4 class="text-secondary text-center">Cooking Instructions</h4>
                    <p class="card-text text-justify">@((MarkupString)recipe.CookingInstructions)</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-muted text-center">Loading...</p>
    }
    <br />
    <br />

    <button class="btn btn-primary" @onclick="RatingShowPopup">Tell us your opinion</button>

    @if (ReviewAndRatingShowPopup)
    {
        <div class="popup">
            <div class="popup-content">
                <div class="mt-3">
                    <h4 class="text-secondary">Leave a Review</h4>
                    <div class="form-group">
                        <label>Rating (1 to 5):</label>
                        <input type="number" class="form-control" @bind="newRating.Value" min="1" max="5" />
                    </div>
                    <div class="form-group">
                        <label>Review Text:</label>
                        <textarea class="form-control" @bind="newReview.ReviewText"></textarea>
                    </div>
                </div>
                <button class="btn btn-primary" @onclick="SubmitRatingAndReview">Confirm your review and/or rating</button>
            </div>
        </div>
    }

    <a class="btn btn-danger" href="https://www.rewe.de/suche/produkte?search=">REWE</a>

   @*  @if (showIngredientStorePopup)
    {
        <div class="popup">
            <div class="popup-content">
                @if (recipe != null)
                {
                    @if (recipe.ListOfIngredients != null)
                    {
                        <ol>
                            @foreach (var ingredient in recipe.ListOfIngredients)
                            {
                                <li>@ingredient.Amount @ingredient.Unit @ingredient.IngredientsName</li>
                            }
                        </ol>
                    }
                    else
                    {
                        <p>Loading ingredients...</p>
                    }
                }
            </div>
        </div>
    }
    *@
</div>

@code {
    [Parameter]
    public string Url { get; set; }

    private Recipe recipe { get; set; } = new();

    private Review newReview { get; set; } = new Review();

    private Rating newRating { get; set; } = new Rating();

    private List<Recipe> recipes { get; set; }

    private Ingredient ingredient { get; set; } = new();

    private int peopleCount { get; set; } = 4;  // Default for 4 people

    private bool showPopup { get; set; } = false;

    private bool showIngredientStorePopup { get; set; } = false;

    private bool ReviewAndRatingShowPopup { get; set; } = false;

    private double ConvertToDouble(object amount)
    {
        if (amount is double) return (double)amount;

        // Attempt to parse if it's a string
        if (double.TryParse(amount?.ToString(), out var parsedAmount))
        {
            return parsedAmount;
        }

        // Default to 0 if conversion fails
        return 0;
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync called");
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("url", out var urlValue))
        {
            Console.WriteLine($"Found url parameter: {urlValue}");
            var decodedUrl = Uri.UnescapeDataString(urlValue);

            try
            {
                if (decodedUrl.Contains(Constants.CHEFKOCH_URL))
                {
                    recipe = await Scrap.ScrapeCKDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else if (decodedUrl.Contains(Constants.ALLRECIPE_URL))
                {
                    recipe = await Scrap.ScrapeAllRecipesDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else if (decodedUrl.Contains(Constants.BBCGOODFOOD_URL))
                {
                    recipe = await Scrap.ScrapeBBCGoodFoodDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else if (decodedUrl.Contains(Constants.DELISH_URL))
                {
                    recipe = await Scrap.ScrapeDelishDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
                }
                else
                {
                    Console.WriteLine("Unknown source domain");
                }

                if (recipe == null)
                {
                    Console.WriteLine("Recipe object is null after scraping.");
                }
                else
                {
                    Console.WriteLine($"Scraped recipe: {recipe.RecipeName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during scraping: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("url parameter not found, navigating to home");
            Navigation.NavigateTo("/");
        }
    }
    private async Task GetIngredientsForRecipePopUp()
    {
        if (recipe != null)
        {
            await GetIngredientsForRecipe();
        }
        showIngredientStorePopup = !showIngredientStorePopup;
    }
    private async Task GetIngredientsForRecipe()
    {
        recipe.ListOfIngredients = await spoonacular.GetIngredientsForRecipe(recipe);
    }

    // Method to update ingredient amounts based on peopleCount
    private void UpdateIngredients()
    {
        showPopup = false;
    }

    // Calculate ingredient amount based on the number of people
    private string GetAmountForPeople(double baseAmount)
    {
        double adjustedAmount = baseAmount * peopleCount / 4;
        return adjustedAmount.ToString("0.##"); // Format to two decimal places
    }

    private void RatingShowPopup()
    {
        ReviewAndRatingShowPopup = !ReviewAndRatingShowPopup;
    }

    private async Task SubmitRatingAndReview()
    {
        // Ensure Reviews is initialized before adding a new review
        if (recipe.Reviews == null)
        {
            recipe.Reviews = new List<Review>();
        }
        // Add the new review to the recipe's list of reviews
        recipe.Reviews.Add(newReview);

        // Ensure Reviews is initialized before adding a new review
        if (recipe.Ratings == null)
        {
            recipe.Ratings = new List<Rating>();
        }
        // Add the new rating to the recipe rating list
        if (newRating.Value >= 1 && newRating.Value <= 5)
        {
            recipe.Ratings.Add(newRating);
        }

        // Save the review to the database (if applicable)
        _context.Recipes.Update(recipe);
        await _context.SaveChangesAsync();

     
    }
}