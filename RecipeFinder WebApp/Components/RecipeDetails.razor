@using Recipe_Finder
@using HtmlAgilityPack
@inject ScrapperService Scrap
@inject NavigationManager Navigation

<PageTitle>Recipe Details</PageTitle>

    <div class="container mt-4">
        <h3 class="text-primary">Recipe Details</h3>

        @if (recipe != null)
        {
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h2 class="card-title">@recipe.RecipeName</h2>

                    @if (!string.IsNullOrEmpty(recipe.Image))
                    {
                        <img src="@recipe.Image" class="img-fluid rounded" alt="Recipe Image" style="width: 100%; max-width: 400px; height: auto;" />
                    }

                    @if (!string.IsNullOrEmpty(recipe.VideoUrl))
                    {
                        <div class="mt-3">
                            <h4 class="text-secondary">Recipe Video</h4>
                            <video width="320" height="240" controls class="w-100">
                                <source src="@recipe.VideoUrl" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }

                    <div class="mt-3">
                        <h4 class="text-secondary">Difficulty Level</h4>
                        <p class="card-text">@recipe.DifficultyLevel</p>
                    </div>

                    <div class="mt-3">
                    <p>Quick tip: "Check the box for any ingredient you already have."</p>
                        <h4 class="text-secondary">Ingredients</h4><br/>
                        <ul class="list-group">
                            @foreach (var ingredient in recipe.ListofIngredients)
                            {
                                <li class="list-group-item">
                                <input type="checkbox" id="@ingredient.IngredientsName" class="mr-2">
                                <label for="@ingredient.IngredientsName">@ingredient.IngredientsName</label>
                                </li>
                            }
                        </ul>
                    </div>

                    <div class="mt-3">
                        <h4 class="text-secondary">Cooking Instructions</h4>
                        <p class="card-text">@((MarkupString)recipe.CookingInstructions)</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p class="text-muted">Loading...</p>
        }
    </div>

@code {
    [Parameter]
    public string Url { get; set; }

    private Recipe recipe { get; set; }

    private Ingredient ingredient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync called");
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("url", out var urlValue))
        {
            Console.WriteLine($"Found url parameter: {urlValue}");
            var decodedUrl = Uri.UnescapeDataString(urlValue);

            if (decodedUrl.Contains(Constants.CHEFKOCH_URL))
            {
                recipe = await Scrap.ScrapeCKDetailsAndUpdateRecipe(new Recipe { Url = decodedUrl });
            }
            else if (decodedUrl.Contains(Constants.ALLRECIPE_URL))
            {
                recipe = await Scrap.ScrapeAllRecipesDetailsAndUpdateRecipie(new Recipe { Url = decodedUrl });
            }
            else
            {
                Console.WriteLine("Unknown source domain");
            }

            Console.WriteLine($"Scraped recipe: {recipe.RecipeName}");
        }
        else
        {
            Console.WriteLine("url parameter not found, navigating to home");
            Navigation.NavigateTo("/");
        }
    }
}