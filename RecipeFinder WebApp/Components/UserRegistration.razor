@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using RecipeFinder_WebApp.Data

@inject UserManager<RecipeFinder_WebAppUser> UserManager
@inject IUserStore<RecipeFinder_WebAppUser> UserStore
@inject SignInManager<RecipeFinder_WebAppUser> SignInManager
@inject IEmailSender<RecipeFinder_WebAppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="user" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="user.FirstName" class="form-control" autocomplete="username" aria-required="true" placeholder="name" />
                <label for="firstName">Name</label>
                <ValidationMessage For="@(() => user.FirstName)" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="user.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="@(() => user.Email)" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="user.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="@(() => user.Password)" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="user.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="@(() => user.ConfirmPassword)" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private User user { get; set; } = new User();

    public async Task RegisterUser()
    {
        // Check if passwords match
        if (user.Password != user.ConfirmPassword)
        {
            identityErrors = new IdentityError[] { new IdentityError { Description = "The password and confirmation password do not match." } };
            return;
        }

        var userEntity = CreateUser();

        await UserStore.SetUserNameAsync(userEntity, user.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(userEntity, user.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(userEntity, user.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(userEntity);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(userEntity);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(userEntity, user.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(userEntity, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private RecipeFinder_WebAppUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<RecipeFinder_WebAppUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(RecipeFinder_WebAppUser)}'. " +
                $"Ensure that '{nameof(RecipeFinder_WebAppUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<RecipeFinder_WebAppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<RecipeFinder_WebAppUser>)UserStore;
    }
}
