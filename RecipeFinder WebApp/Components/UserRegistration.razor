@* @using RecipeFinder_WebApp
@using RecipeFinder_WebApp.Components.Account
@using Recipe_Finder
@using System.IO
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject UserService UserServ

<EditForm Model="UserProfile" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="FirstName">First Name:</label><br />
        <InputText id="FirstName" @bind-Value="UserProfile.FirstName" />
        <ValidationMessage For="@(() => UserProfile.FirstName)" />
    </div>

    <div>
        <label for="LastName">Last Name:</label><br />
        <InputText id="LastName" @bind-Value="UserProfile.LastName" />
        <ValidationMessage For="@(() => UserProfile.LastName)" />
    </div>

    <div>
        <label for="Email">Email:</label><br />
        <InputText id="Email" @bind-Value="UserProfile.Email" />
        <ValidationMessage For="@(() => UserProfile.Email)" />
    </div>

    <div>
        <label for="Password">Password:</label><br />
        <InputText type="password" id="Password" @bind-Value="UserProfile.Password" />
        <ValidationMessage For="@(() => UserProfile.Password)" />
    </div>

    <div>
        <label for="ConfirmPassword">Confirm Password:</label><br />
        <InputText type="password" id="ConfirmPassword" @bind-Value="ConfirmPassword" />
        <ValidationMessage For="@(() => ConfirmPassword)" />
    </div>

    <div>
        <label for="StreetName">Street Name:</label><br />
        <InputText id="StreetName" @bind-Value="UserProfile.Address.StreetsName" />
        <ValidationMessage For="@(() => UserProfile.Address.StreetsName)" />
    </div>

    <div>
        <label for="HouseNumber">House Number:</label><br />
        <InputText id="HouseNumber" @bind-Value="UserProfile.Address.Housenumber" />
        <ValidationMessage For="@(() => UserProfile.Address.Housenumber)" />
    </div>

    <div>
        <label for="PostalCode">Postal Code:</label><br />
        <InputText id="PostalCode" @bind-Value="UserProfile.Address.PostalCode" />
        <ValidationMessage For="@(() => UserProfile.Address.PostalCode)" />
    </div>

    <div>
        <label for="City">City:</label><br />
        <InputText id="City" @bind-Value="UserProfile.Address.City" />
        <ValidationMessage For="@(() => UserProfile.Address.City)" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@code {
    [Parameter]
    public string Title { get; set; }

    private List<UsersProfile> users { get; set; } = new List<UsersProfile>();

    private UsersProfile UserProfile { get; set; } = new UsersProfile
        {
            Address = new Address()
        };

    private string ConfirmPassword { get; set; }

    private void RegisterUser()
    {
        // Check password confirmation
        if (UserProfile.Password != ConfirmPassword)
        {
            Console.WriteLine("Passwords do not match.");
            return;
        }

        try
        {
            users = DataService.LoadUsersFromXmlFile(Constants.XML_USER_PATH);

            if (users.Any(u => u.Email.Equals(UserProfile.Email, StringComparison.OrdinalIgnoreCase)))
            {
                Console.WriteLine("User with this email already exists.");
                Navigation.NavigateTo("/profile");
            }

            users.Add(UserProfile);
            DataService.SaveUsersToXmlFile(users, Constants.XML_USER_PATH);

            Navigation.NavigateTo("/profile");
            Console.WriteLine("User registered successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

        // Reset form
        UserProfile = new UsersProfile
            {
                Address = new Address()
            };
        ConfirmPassword = string.Empty;
    }
}
 *@


            @using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using RecipeFinder_WebApp.Data

@inject UserManager<RecipeFinder_WebAppUser> UserManager
@inject IUserStore<RecipeFinder_WebAppUser> UserStore
@inject SignInManager<RecipeFinder_WebAppUser> SignInManager
@inject IEmailSender<RecipeFinder_WebAppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="user.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => user.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="user.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => user.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private UsersProfile user { get; set; } = new();

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private RecipeFinder_WebAppUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<RecipeFinder_WebAppUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(RecipeFinder_WebAppUser)}'. " +
                $"Ensure that '{nameof(RecipeFinder_WebAppUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<RecipeFinder_WebAppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<RecipeFinder_WebAppUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
