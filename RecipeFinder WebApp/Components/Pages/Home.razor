@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject NavigationManager Navigation
@inject DataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject ApplicationDbContext _context 
@inject MealDbService _mealDbService
@inject FavoriteService _favorite


<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">Recipe Finder</h1>
        <p class="lead">Discover delicious recipes</p>

        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <EditForm Model="@searchQuery" FormName="RecipeForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe here..." /><br />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="SearchForRecipeFromCK">Search</button>
                        @* <button class="btn btn-primary" @onclick="SearchRecipes">Search CANTINA's Recipes</button> 
                          <button class="btn btn-secondary" @onclick="SearchForRecipeFromAR">Search AllRecipes</button> *@
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    @if (recipes.Count > 0)
    {
        <RecipeOutput recipes="recipes" RemoveRecipeButton="false"></RecipeOutput>
    }
   
</div>

@code {
    private List<Recipe> recipes { get; set; } = new List<Recipe>();
    private User userProfile { get; set; } = new User();
    private string searchQuery { get; set; } = string.Empty;
    private ApplicationUser appUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        appUser = await DataService.GetAuthenticatedUserAsync();

        userProfile = appUser?.User;

        if (userProfile == null)
        {
            // User profile not found, force logout and redirect to login
            await SignInManager.SignOutAsync();
            Navigation.NavigateTo("Account/Register");
            return;
        }
    }

    private async Task SearchForRecipeFromCK()
    {
        recipes = await Scrap.ScrapeCKRecipes(searchQuery);
    }

    private async Task SearchForRecipeFromAR()
    {
        recipes = await Scrap.ScrapeFromAllRecipe(searchQuery);
    }

    // private async Task SearchRecipes()
    // {
    //     recipes = await Scrap.ScrapeCantinaRecipes(searchQuery);
    // }

    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private async Task AddRecipeToFavorite(Recipe recipe)
    {
        await _favorite.AddFavoriteRecipeAsync(recipe);
        StateHasChanged();
    }
    }
