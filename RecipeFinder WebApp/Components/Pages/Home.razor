@page "/"
@using Microsoft.AspNetCore.Identity
@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using System.Security.Claims

@inject SignInManager<RecipeFinder_WebAppUser> SignInManager
@inject ScrapperService Scrap
@inject NavigationManager Navigation
@inject DataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 text-primary">Recipe Finder!</h1>
        <p class="lead">Discover delicious recipes from Chefkoch and AllRecipes</p>

        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <EditForm Model="@searchQuery" FormName="RecipeForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe here..." /><br />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="SearchForRecipeFromCK">Search ChefKoch</button>
                        <button class="btn btn-secondary" @onclick="SearchForRecipeFromAR">Search AllRecipes</button>
                        <button class="btn btn-primary" @onclick="SearchForRecipeFromCookPad">Search CookPad</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    @if (recipes.Count > 0)
    {
        <div class="row mt-5">
            @foreach (var rec in recipes)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(rec.Image))
                        {
                            <img src="@rec.Image" class="card-img-top" alt="Recipe Image" style="height: 200px; object-fit: cover;" />
                        }
                        <div class="card-body">
                            <h5 class="card-title">@rec.RecipeName</h5>
                            <a href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)" class="btn btn-outline-primary">View Recipe</a>
                            <button class="btn btn-outline-primary" @onclick="() => AddRecipeToFavorite(rec)">Add to Fav!</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(searchQuery))
    {
        <div class="alert alert-warning text-center mt-4">
            <p>No results found for "@searchQuery".</p>
        </div>
    }

    @if (showSuccessMessage)
    {
        <div class="alert alert-success mt-4" role="alert">
            <i class="bi bi-check-circle"></i> Recipe successfully added to favorites!
        </div>
    }
</div>

@code {
    private List<Recipe> recipes { get; set; } = new List<Recipe>();
    private User user { get; set; }
    private bool showSuccessMessage { get; set; } = false;
    private string searchQuery { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsUser = authState.User;

        if (claimsUser.Identity.IsAuthenticated)
        {
            var userId = claimsUser.FindFirst("UserId")?.Value ?? claimsUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                user = await DataService.GetUserProfileAsync(userId);
               
            }
        }
        if (user == null)
        {
            // User profile not found, force logout and redirect to login
            await SignInManager.SignOutAsync();
            Navigation.NavigateTo("/userAccount");
            return;
        }
    }

    private async Task SearchForRecipeFromCK()
    {
        recipes = await Scrap.ScrapeCKRecipes(searchQuery);
    }

    private async Task SearchForRecipeFromAR()
    {
        recipes = await Scrap.ScrapeFromAllRecipe(searchQuery);
    }

    private async Task SearchForRecipeFromCookPad()
    {
        recipes = await Scrap.ScrapeCookPadRecipes(searchQuery);
    }

    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private async Task AddRecipeToFavorite(Recipe recipe)
    {
        if (user != null)
        {
            user.FavoriteRecipes.Add(recipe);
            showSuccessMessage = true;
            StateHasChanged();
            await Task.Delay(3000); // Delay to auto-hide the success message after 3 seconds
            showSuccessMessage = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Cannot add to favorites, user is not authenticated.");
        }
    }  
}
