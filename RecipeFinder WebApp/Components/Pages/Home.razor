@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject NavigationManager Navigation
@inject DataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject ApplicationDbContext _context

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 text-primary">Recipe Finder!</h1>
        <p class="lead">Discover delicious recipes from ChefKoch, AllRecipes, and CookPad</p>

        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <EditForm Model="@searchQuery" FormName="RecipeForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="input-group mb-3">
                        <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe here..." />
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" @onclick="SearchForRecipeFromCK">Search ChefKoch</button>
                            <button class="btn btn-secondary" type="button" @onclick="SearchForRecipeFromAR">Search AllRecipes</button>
                            <button class="btn btn-primary" type="button" @onclick="SearchForRecipeFromCookPad">Search CookPad</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    @if (recipes.Count > 0)
    {
       <RecipeOutput recipes="recipes" RemoveRecipeButton="false"></RecipeOutput>
    }
    else if (!string.IsNullOrEmpty(searchQuery))
    {
        <div class="alert alert-warning text-center mt-4">
            <p>No results found for "@searchQuery".</p>
        </div>
    }

    @if (showSuccessMessage)
    {
        <div class="alert alert-success mt-4" role="alert">
            <i class="bi bi-check-circle"></i> Recipe successfully added to favorites!
        </div>
    }
</div>

@code {
    private List<Recipe> recipes { get; set; } = new List<Recipe>();
    private User userProfile { get; set; } = new User();
    private bool showSuccessMessage { get; set; } = false;
    private string searchQuery { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userProfile = await DataService.GetAuthenticatedUserAsync();

        if (userProfile == null)
        {
            // User profile not found, force logout and redirect to login
            await SignInManager.SignOutAsync();
            Navigation.NavigateTo("Account/Register");
            return;
        }
    }

    private async Task SearchForRecipeFromCK()
    {
        recipes = await Scrap.ScrapeCKRecipes(searchQuery);
    }

    private async Task SearchForRecipeFromAR()
    {
        recipes = await Scrap.ScrapeFromAllRecipe(searchQuery);
    }

    private async Task SearchForRecipeFromCookPad()
    {
        recipes = await Scrap.ScrapeCookPadRecipes(searchQuery);
    }

    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private async Task AddRecipeToFavorite(Recipe recipe)
    {
        await DataService.AddFavoriteRecipeAsync(recipe);
        showSuccessMessage = true;

        // Hide the success message after 3 seconds
        await Task.Delay(3000);
        showSuccessMessage = false;
        StateHasChanged();
    }
}
