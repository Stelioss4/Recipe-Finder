@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using RecipeFinder_WebApp.Components.Account.Pages
@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication

@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject ScrapperService Scrap
@inject DataService DataService
@inject ILogger<Login> Logger

<PageTitle>Home</PageTitle>

<div class="container mt-2">
    <div class="row">
        <div class="text-center">
            <h1 class="display-4">Welcome to Recipe Finder</h1>
            <p class="lead">Find delicious recipes, plan your meals, and shop for ingredients effortlessly!</p>
        </div>

        <AuthorizeView>
            <NotAuthorized>
                <!-- Left Side: Introduction -->
                <div class="col-md-6 d-flex flex-column justify-content-center text-start">
                    <div class="mt-4">
                        <h3>Why Use Recipe Finder?</h3>
                        <p>With Recipe Finder, you can:</p>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>🔍 Search</strong> for thousands of delicious recipes.</li>
                            <li class="list-group-item"><strong>📋 Plan</strong> your weekly meals effortlessly.</li>
                            <li class="list-group-item"><strong>🛒 Shop</strong> for ingredients with integrated market options.</li>
                            <li class="list-group-item"><strong>❤️ Save</strong> your favorite recipes for quick access.</li>
                        </ul>
                    </div>

                    <div class="mt-4 text-center">
                        <p>Want to try it out? Use our demo account!</p>
                        <button class="btn btn-success" @onclick="LoginAsDemoAsync" disabled="@isDemoLoggingIn">
                            @if (isDemoLoggingIn)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Logging in...</span>
                            }
                            else
                            {
                                <span>Try the Demo Experience</span>
                            }
                        </button>
                    </div>
                </div>

                <!-- Right Side: Search Bar -->
                <div class="col-md-6 d-flex flex-column justify-content-center">
                    <div class="card p-4 shadow-sm">
                        <EditForm Model="@searchQuery" FormName="RecipeForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe..." /><br />
                            <div class="text-center">
                                <button class="btn btn-primary" @onclick="SearchForRecipeFromCK" disabled="@isSearching">
                                    @if (isSearching)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Searching...</span>
                                    }
                                    else
                                    {
                                        <span>Search</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </NotAuthorized>

            <Authorized>
                <!-- Centered Search Bar without too much empty space -->
                <div class="d-flex justify-content-center mt-5">
                    <div class="card p-4 shadow-sm w-50">
                        <p class="text-center">Search for your favorite recipes below:</p>
                        <EditForm Model="@searchQuery" FormName="RecipeForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <InputText id="RecipeName" class="form-control" @bind-Value="searchQuery" placeholder="Search for any recipe..." /><br />
                            <div class="text-center">
                                <button class="btn btn-primary" @onclick="SearchForRecipeFromCK" disabled="@isSearching">
                                    @if (isSearching)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Searching...</span>
                                    }
                                    else
                                    {
                                        <span>Search</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    @if (recipes.Count > 0)
    {
        <RecipeOutput recipes="recipes" RemoveRecipeButton="false" OnFavoritesChanged="UpdateFavorites"></RecipeOutput>
    }
</div>


@code {
    private string errorMessage;
    private List<Recipe> recipes { get; set; } = new List<Recipe>();
    private string searchQuery { get; set; } = string.Empty;
    private ApplicationUser appUser { get; set; }
    private bool isSearching = false;
    private bool isDemoLoggingIn = false;

    // protected override async Task OnInitializedAsync()
    // {
    //     appUser = await DataService.GetAuthenticatedUserAsync();
    // }

    private void LoginAsDemoAsync()
    {
        isDemoLoggingIn = true;

        Navigation.NavigateTo("/Account/DemoLogin");

        isDemoLoggingIn = false;

        // // // try
        // // // {


        // // //     var result = SignInManager.PasswordSignInAsync("demo@recipefinder.com", "DemoPass123!", false, false);

        // // //     if (result.IsCompletedSuccessfully)
        // // //     {
        // // //         Logger.LogInformation("Demo user logged in.");
        // // //         Navigation.NavigateTo("/");
        // // //     }
        // // //     else
        // // //     {
        // // //         Logger.LogWarning("Invalid login attempt.");
        // // //     }
        // // // }
        // // // catch(Exception)
        // // // {
        // // //     Console.WriteLine("Invalid login attempt.");
        // // // }
        // var demoEmail = "demo@recipefinder.com";
        // var demoPassword = "DemoPass123!";

        // if (HttpContextAccessor.HttpContext == null)
        // {
        //     errorMessage = "Error: HttpContext is null.";
        //     return;
        // }

        // var result = await SignInManager.PasswordSignInAsync(demoEmail, demoPassword, false, false);

        // if (result.Succeeded)
        // {
        // }
        // else
        // {
        //     errorMessage = "Error: Invalid login attempt.";
        // }

    }

    private async Task SearchForRecipeFromCK()
    {
        isSearching = true;
        recipes = await Scrap.ScrapeCKRecipes(searchQuery);
        isSearching = false;
    }

    private void UpdateFavorites()
    {
        InvokeAsync(StateHasChanged);
    }
}
