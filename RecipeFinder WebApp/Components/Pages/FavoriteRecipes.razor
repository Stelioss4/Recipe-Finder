@page "/favoriteRecipes"
@using RecipeFinder_WebApp.Data
@using System.Security.Claims

@inject FavoriteRecipeService FavoriteRecipeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserService userService


<h3>Favorite Recipes</h3>
<div class="container mt-5">

    @if (userProfile.FavoriteRecipes != null && userProfile.FavoriteRecipes.Count > 0)
    {
        <div class="row">
            @foreach (var rec in recipes)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(rec.Image))
                        {
                            <img src="@rec.Image" class="card-img-top" alt="Recipe Image" style="height: 200px; object-fit: cover;" />
                        }
                        <div class="card-body">
                            <h5 class="card-title">@rec.RecipeName</h5>
                            <a href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)" class="btn btn-outline-primary">View Recipe</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>You don't have any favorite recipes yet.</p>
        <button class="btn btn-outline-primary" @onclick="() => NavigateToHome()">Search recipes to Add!</button>
    }

</div>

@code {
    [Inject]
    private RecipeFinder_WebAppContext DbContext { get; set; } = default!;

    private List<User> users { get; set; } = new List<User>();
    private User userProfile { get; set; } = new User();
    private List<Recipe>? recipes { get; set; }

    private List<Recipe> favoriteRecipes { get; set; } = new List<Recipe>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Try to get UserId from different claims
            var userId = user.FindFirst("UserId")?.Value ??
                         user.FindFirst(ClaimTypes.NameIdentifier)?.Value ??
                         user.FindFirst(ClaimTypes.Name)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                // Load users from the SQLite database
                users = DbContext.Users
                                 .Select(u => new User
                                     {
                                         UserId = u.Id,
                                         UserName = u.UserName,
                                         Email = u.Email,
                                         FavoriteRecipes = new List<Recipe>() // Initialize to avoid null reference
                                     })
                                 .ToList();

                // Find the logged-in user from the list
                userProfile = users.FirstOrDefault(u => u.UserId == userId);

                if (userProfile != null)
                {
                    // Load the user's favorite recipes
                    userProfile.FavoriteRecipes = DataService.GetUserFavorites(userProfile);
                }
            }
            else
            {
                Console.WriteLine("UserId is null or empty.");
            }
        }
    }
    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
}
