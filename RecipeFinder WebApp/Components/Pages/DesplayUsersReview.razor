@page "/watchUsersReview"

@using RecipeFinder_WebApp.Data
@using Recipe_Finder
@using HtmlAgilityPack
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims

@inject DataService _dataService
@inject ApplicationDbContext _context
@inject NavigationManager Navigation

<h3>User Reviews</h3>

@if (reviews != null && reviews.Count > 0)
{
    <ul class="list-group">
        @foreach (var review in reviews)
        {
            <li class="list-group-item mb-3">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h5 class="mb-1">@review.Profile</h5>
                        <p class="mb-1">@review.ReviewText</p>
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No reviews available for this recipe.</p>
}

@code {
    [Parameter]
    public string recipeUrl { get; set; }

    public Recipe recipe { get; set; } = new();

    private List<Review> reviews { get; set; } = new();

    private ApplicationUser appUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (appUser != null)
        {
            Console.WriteLine("OnInitializedAsync called");
            var uri = new Uri(Navigation.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            appUser = await _dataService.GetAuthenticatedUserAsync();

            if (query.TryGetValue("url", out var urlValue))
            {
                Console.WriteLine($"Found url parameter: {urlValue}");
                var decodedUrl = Uri.UnescapeDataString(urlValue);

                // 1. Check if the recipe is already in the database
                recipe = await _context.Recipes
                 .Include(r => r.Reviews)
                 .Include(r => r.Ratings)
                 .FirstOrDefaultAsync(r => r.Url == decodedUrl);

                if (recipe != null)
                {
                    Console.WriteLine("Recipe found in the database.");
                    // Fetch additional related data as needed, e.g., average newRating
                    var result = await _dataService.ShowRecipesReviewsAndRatings(recipe);
                    reviews = result.Reviews;

                }
                else
                {
                    // 2. If not in the database, proceed with scraping
                    Console.WriteLine("Recipe not found in database; starting online scrape.");
                }
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
            Navigation.NavigateTo("account/login");
        }
    }
}
