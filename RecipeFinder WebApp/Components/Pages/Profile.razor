@page "/profile"
@using Microsoft.AspNetCore.Identity
@using RecipeFinder_WebApp.Data
@using System.Security.Claims
@using Recipe_Finder
@using Microsoft.EntityFrameworkCore

@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DataService DataService
@inject UserManager<ApplicationUser> _userManager

<h3>User Profile</h3>
<div class="container mt-5">
    @if (userProfile != null)
    {
        <p>Welcome, @userProfile.Name!</p>
        <br /> <button class="btn btn-secondary mt-3" @onclick="TogglePopup">Favorite Recipes</button>
       

        <!-- Popup box -->
        @if (showPopup)
        {
            <div class="popup">
                <div class="popup-content">

                    @if (userProfile.FavoriteRecipes != null && userProfile.FavoriteRecipes.Count > 0)
                    {
                        <RecipeOutput recipes="userProfile.FavoriteRecipes" AddRecipeButton="false"></RecipeOutput>
                    }
                    else
                    {
                        <p>You don't have any favorite recipes yet.</p>
                        <button class="btn btn-outline-primary" @onclick="NavigateToHome">Search recipes to Add!</button>
                    }
                </div>
            </div>
        }
        <div class="col-md-6 col-md-offset-2"></div>
    }
    else
    {
        <p>Loading user profile...</p>
    }
</div>

@code {
    public User? userProfile { get; set; } = new User();

    private bool showPopup { get; set; } = false;

    private void TogglePopup()
    {
        showPopup = !showPopup; // Toggle the popup
    }



    protected override async Task OnInitializedAsync()
    {
        userProfile = await DataService.GetAuthenticatedUserAsync();
        if (userProfile == null)
        {
            // User profile not found, force logout and redirect to login
            await SignInManager.SignOutAsync();
            Navigation.NavigateTo("Account/Register");
            return;
        }
    }

    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private async Task RemoveRecipeFromFavorite(Recipe rec)
    {
        await DataService.RemoveFavoriteRecipeAsync(rec);
        // Refresh the user's profile after removing the recipe
        userProfile.FavoriteRecipes.Remove(rec);
        StateHasChanged();
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
}
