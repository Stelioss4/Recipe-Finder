   @page "/profile"
@using Microsoft.AspNetCore.Identity
@using RecipeFinder_WebApp.Data
@using System.Security.Claims
@using Recipe_Finder
@using Microsoft.EntityFrameworkCore

@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DataService DataService
@inject UserManager<ApplicationUser> _userManager
@inject WeeklyPlanService _weeklyPlan
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject FavoriteService _favorite
@inject Blazored.Toast.Services.IToastService ToastService


<h3>User Profile</h3>
<div class="container mt-5">
    @if (user != null)
    {
        <p>Welcome, @user.Name!</p>
        <br />

        <!-- Button for Favorite Recipes Popup -->
        <button class="btn btn-primary mt-3" @onclick="TogglePopupFavorites">Favorite Recipes</button>

        <!-- Popup for Favorite Recipes -->
        @if (showFavoritesPopup)
        {
            <div class="popup">
                <div class="popup-content">
                    @if (user.FavoriteRecipes != null && user.FavoriteRecipes.Count > 0)
                    {
                        <RecipeOutput recipes="user.FavoriteRecipes" AddRecipeButton="false" OnFavoritesChanged="UpdateFavorites"></RecipeOutput>
                    }
                    else
                    {
                        <p>You don't have any favorite recipes yet.</p>
                        <button class="btn btn-outline-primary" @onclick="NavigateToHome">Search recipes to Add!</button>
                    }
                </div>
            </div>
        }
        <!-- Button for ShoppingList Popup -->
        <button class="btn btn-secondary mt-3" @onclick="TogglePopupShoppingList">ShoppingList</button>

        @if (showShoppingListPopup)
        {

            if (appUser.User.ShoppingList != null && appUser.User.ShoppingList.Count > 0)
            {
                <ShoppingListOutput ShoppingList="user.ShoppingList" OnFavoritesChanged="UpdateFavorites"></ShoppingListOutput>
            }
            else
            {
                <p>Your Shopping list is empty!</p>
            }
        }

        <!-- Button for Weekly Plan Popup -->
        <button class="btn btn-primary mt-3" @onclick="TogglePopupWeeklyPlan">Weekly Meal Plan</button>

        <!-- Popup for Weekly Plan -->
        @if (showWeeklyPlanPopup)
        {
            <div class="popup">
                <div class="popup-content">
                    @if (appUser.User.WeeklyPlan != null && appUser.User.WeeklyPlan.Count > 0)
                    {
                        @for (int i = 0; i < appUser.User.WeeklyPlan.Count; i++)
                        {
                            var rec = appUser.User.WeeklyPlan[i];
                            var day = daysOfWeek[i];

                            <div>
                                <div class="list-group-item">
                                    <h5>@day</h5> <!-- Display the day of the week above each recipe -->
                                    <div class="d-flex align-items-center">
                                        <input type="checkbox" id="checkbox-@rec.RecipeName" class="me-2" />
                                        @if (rec.Image != null && rec.Image.Length > 0)
                                        {
                                            <img src="data:image/png;base64,@Convert.ToBase64String(rec.Image)" alt="Recipe Image" style="width: 50px; height: 50px; object-fit: cover;" class="me-3" />
                                        }
                                        <div>
                                            <h6 class="mb-1">@rec.RecipeName</h6>
                                            <a href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)" class="btn btn-outline-primary btn-sm">View Recipe</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <p>Your weekly plan was created on @appUser.User.LastWeeklyPlanDate!</p>
                        <button class="btn btn-secondary" @onclick="ForceNewPlan" disabled="@Loading">
                            @if (Loading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> New Plan...</span>
                            }
                            else
                            {
                                <span>New Plan</span>
                            }
                        </button>

                    }
                    else if (user.FavoriteRecipes.Count <= Constants.LIMIT_DAYS)
                    {
                        <p>You need more favorite recipes to generate a weekly plan.</p>
                        <button class="btn btn-outline-primary" @onclick="NavigateToHome">Search recipes to Add!</button>
                    }
                    else
                    {
                        <p>No weekly plan generated yet.</p>
                        <button class="btn btn-outline-primary" @onclick="CreateWeeklyPlan" disabled="@Loading">
                            @if (Loading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Plan Generating...</span>
                            }
                            else
                            {
                                <span>Generate Weekly Plan</span>
                            }
                        </button>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading user profile...</p>
    }
</div>

@code {
    public User user { get; set; } = new User();

    private ApplicationUser appUser { get; set; } = new();

    private List<Recipe> weeklyPlan { get; set; } = new();

    private bool showWeeklyPlanPopup { get; set; } = false;

    private bool showFavoritesPopup { get; set; } = false;

    private bool showShoppingListPopup { get; set; } = false;

    private readonly string[] daysOfWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };

    private bool Loading = false;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    protected async Task Init()
    {
        using var context = DbContextFactory.CreateDbContext();

        appUser = await DataService.GetAuthenticatedUserAsync();

        if (appUser != null)
        {
            appUser.User = await DataService.GetUserByIdAsync();

            appUser.User.ShoppingList = await _favorite.GetShoppingListAsync();

            if (appUser.User.LastWeeklyPlanDate != null)
            {
                appUser.User.LastWeeklyPlanDate = await _weeklyPlan.CheckWeeklyPlanDate();

                var daysSinceLastPlan = (DateTime.Now - appUser.User.LastWeeklyPlanDate.Value).TotalDays;

                if (appUser.User.LastWeeklyPlanDate.HasValue && daysSinceLastPlan >= Constants.WEEK_DAY_NUM)
                {
                    // Delete weekly plan after 7 days
                    appUser.User.WeeklyPlan.Clear();
                    appUser.User.LastWeeklyPlanDate = null;
                    // Save changes to the database
                    await context.SaveChangesAsync();

                    ToastService.ShowInfo("Your weekly plan has expired. You can now create a new one!");
                }
            }
            if (appUser.User.ShoppingList == null)
            {
                appUser.User.ShoppingList = new List<Ingredient>();
            }

        }
        else
        {
            // User profile not found, force logout and redirect to login
            await SignInManager.SignOutAsync();
            Navigation.NavigateTo("Account/LogIn");
            return;
        }

        await _favorite.ReloadFavorites();
        user = appUser.User;
    }

    private async Task UpdateFavorites()
    {
        await Init();
        await InvokeAsync(StateHasChanged);
    }

    private void TogglePopupFavorites()
    {
        showFavoritesPopup = !showFavoritesPopup;
    }

    private void TogglePopupWeeklyPlan()
    {
        showWeeklyPlanPopup = !showWeeklyPlanPopup;
    }

    private void TogglePopupShoppingList()
    {
        showShoppingListPopup = !showShoppingListPopup;
    }

    private async Task CreateWeeklyPlan()
    {
        Loading = true;
        user.WeeklyPlan = await _weeklyPlan.GenerateWeeklyPlanAsync();
        await Init();
        await InvokeAsync(StateHasChanged);
        Loading = false;
    }

    private async Task ForceNewPlan()
    {
        Loading = true;
        user.WeeklyPlan = await _weeklyPlan.ForceNewPlanAsync();
        await Init();
        await InvokeAsync(StateHasChanged);
        Loading = false;
    }

    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private void OnShoppingListAdded(Ingredient ingredient)
    {
        user.ShoppingList.Add(ingredient);
        StateHasChanged();
    }

    private void OnShoppingListRemoved(Ingredient ingredient)
    {
        user.ShoppingList.Remove(ingredient);
        StateHasChanged();
    }
}
