@using RecipeFinder_WebApp.Data
@using Recipe_Finder

@inject NavigationManager Navigation
@inject DataService DataService
@inject FavoriteService _favorite
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.Toast.Services.IToastService ToastService



<div class="row mt-5">
    @if (recipes?.Count > 0)
    {
        @foreach (var rec in recipes)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    @if (rec.Image != null && rec.Image.Length > 0)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(rec.Image)" class="card-img-top" alt="Recipe Image" style="height: 200px; object-fit: cover;" href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)" />
                    }
                    <div class="btn-group">
                        <div class="card-body">
                            <h5 class="card-title" href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)">@rec.RecipeName</h5>

                            <a href="#" @onclick="() => NavigateToRecipeDetails(rec.Url)" class="btn btn-outline-primary">View Recipe</a>
                            @if (appUser != null)
                            {
                                @if (AddRecipeButton)
                                {
                                    <button class="btn btn-primary" @onclick="() => AddRecipeToFavorite(rec)" disabled="@(loadingRecipe == rec && loadingAction == "add")"
                                            hidden="@(!isAuthenticated ? "hidden" : null)">
                                        @if (loadingRecipe == rec)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span>add to favorites...</span>
                                        }
                                        else
                                        {
                                            <span class="bi bi-heart">Add to Fav!</span>
                                        }
                                    </button>
                                }

                                @if (RemoveRecipeButton)
                                {
                                    <button class="btn btn-danger" @onclick="() => RemoveRecipeFromFavorite(rec)" disabled="@(loadingRecipe == rec && loadingAction == "remove")">
                                        @if (loadingRecipe == rec)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span>removing from favorites...</span>
                                        }
                                        else
                                        {
                                            <span class="bi bi-x-circle">Remove</span>
                                        }
                                    </button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public List<Recipe> recipes { get; set; } = new List<Recipe>();
    [Parameter] public ApplicationUser appUser { get; set; } = new();
    [Parameter] public bool RemoveRecipeButton { get; set; } = true;
    [Parameter] public bool AddRecipeButton { get; set; } = true;
    [Parameter] public EventCallback<Recipe> OnFavoritesChanged { get; set; }
    private Recipe loadingRecipe = null;
    private string loadingAction = null; // "add" or "remove"
    private bool isAuthenticated { get; set; }
    private bool favoriteAddAndRemoveToastShown = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
    }
    private void NavigateToRecipeDetails(string recipeUrl)
    {
        Navigation.NavigateTo($"/recipeDetails?url={Uri.EscapeDataString(recipeUrl)}");
    }

    private async Task AddRecipeToFavorite(Recipe recipe)
    {
        loadingRecipe = recipe;
        loadingAction = "add";
        await _favorite.AddFavoriteRecipeAsync(recipe);
        await OnFavoritesChanged.InvokeAsync(recipe);
        if (!favoriteAddAndRemoveToastShown)
        {
            ToastService.ShowSuccess($"Recipe '{recipe.RecipeName}' added to favorites!");
            favoriteAddAndRemoveToastShown = true;
            Console.WriteLine($"Recipe '{recipe.RecipeName}' added to favorites!");
        }
        loadingRecipe = null;
        loadingAction = null;
    }

    private async Task RemoveRecipeFromFavorite(Recipe recipe)
    {
        loadingRecipe = recipe;
        loadingAction = "remove";
        await _favorite.RemoveFavoriteRecipeAsync(recipe);
        await OnFavoritesChanged.InvokeAsync(recipe);
        if (!favoriteAddAndRemoveToastShown)
        {
            ToastService.ShowSuccess($"Recipe '{recipe.RecipeName}' removed from favorites!");
            favoriteAddAndRemoveToastShown = true;
            Console.WriteLine($"Recipe '{recipe.RecipeName}' removed from favorites!");
        }
        loadingRecipe = null;
        loadingAction = null;

    }
}